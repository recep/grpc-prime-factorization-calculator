// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// FactorizationServiceClient is the client API for FactorizationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FactorizationServiceClient interface {
	Separate(ctx context.Context, in *NumberRequest, opts ...grpc.CallOption) (FactorizationService_SeparateClient, error)
}

type factorizationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFactorizationServiceClient(cc grpc.ClientConnInterface) FactorizationServiceClient {
	return &factorizationServiceClient{cc}
}

func (c *factorizationServiceClient) Separate(ctx context.Context, in *NumberRequest, opts ...grpc.CallOption) (FactorizationService_SeparateClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FactorizationService_serviceDesc.Streams[0], "/number.FactorizationService/Separate", opts...)
	if err != nil {
		return nil, err
	}
	x := &factorizationServiceSeparateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FactorizationService_SeparateClient interface {
	Recv() (*PrimeNumResponse, error)
	grpc.ClientStream
}

type factorizationServiceSeparateClient struct {
	grpc.ClientStream
}

func (x *factorizationServiceSeparateClient) Recv() (*PrimeNumResponse, error) {
	m := new(PrimeNumResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FactorizationServiceServer is the server API for FactorizationService service.
// All implementations must embed UnimplementedFactorizationServiceServer
// for forward compatibility
type FactorizationServiceServer interface {
	Separate(*NumberRequest, FactorizationService_SeparateServer) error
	mustEmbedUnimplementedFactorizationServiceServer()
}

// UnimplementedFactorizationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFactorizationServiceServer struct {
}

func (UnimplementedFactorizationServiceServer) Separate(*NumberRequest, FactorizationService_SeparateServer) error {
	return status.Errorf(codes.Unimplemented, "method Separate not implemented")
}
func (UnimplementedFactorizationServiceServer) mustEmbedUnimplementedFactorizationServiceServer() {}

// UnsafeFactorizationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FactorizationServiceServer will
// result in compilation errors.
type UnsafeFactorizationServiceServer interface {
	mustEmbedUnimplementedFactorizationServiceServer()
}

func RegisterFactorizationServiceServer(s grpc.ServiceRegistrar, srv FactorizationServiceServer) {
	s.RegisterService(&_FactorizationService_serviceDesc, srv)
}

func _FactorizationService_Separate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NumberRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FactorizationServiceServer).Separate(m, &factorizationServiceSeparateServer{stream})
}

type FactorizationService_SeparateServer interface {
	Send(*PrimeNumResponse) error
	grpc.ServerStream
}

type factorizationServiceSeparateServer struct {
	grpc.ServerStream
}

func (x *factorizationServiceSeparateServer) Send(m *PrimeNumResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _FactorizationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "number.FactorizationService",
	HandlerType: (*FactorizationServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Separate",
			Handler:       _FactorizationService_Separate_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "number.proto",
}
